package com.company.Array;

import java.util.Arrays;

public class Metod {
    public static void main(String[] args) {

        // array.length -  длина массива


//        Три самых частых действия при работе с массивами:
//        1. Сортировка массива
//        2. Поиск минимального (или максимального) элемента массива
//        3. Определение индекса элемента в массиве (поиск элемента в массиве)

// Метод Arrays.sort() - позволяет сортировать элементы массива по возрастанию
        // сортировать можно не только весь массив, но и часть массива. Вот как выглядит его вызов
        // Arrays.sort(имя, первый, последний); Где первый и последний — это номера первой и последней ячеек,
        // которых должна коснуться сортировка.

// Метод Arrays.binarySearch() - возвращает позицию заданного значения
        // int index = Arrays.binarySearch(имя, значение);

// Метод Arrays.mismatch() - Находит и возвращает индекс первого несоответствия между двумя массивами int,
        // в противном случае возвращает -1, если несоответствие не найдено.


// Метод Arrays.compare()

// Метод Arrays.fill() - заполняет переданный массив переданным значением Arrays.fill(имя массива, значение)
        // Метод Arrays.fill() - можно заполнить определенным значением не весь массив, а его часть:
        // Arrays.fill(имя, первый, последний, значение)
        // Метод Arrays.fill() работает только с одномерными массивами

// Метод Arrays.toString() - возвращает строковое представление одномерного массива, разделяя элементы запятой.
// Метод Arrays.deepToString() - языка Java возвращает строковое представление многомерного массива
// Метод System.arraycopy() - осуществляет копирование части массива в другой массив.

// Метод Arrays.copyOf() - тип[] имя2 = Arrays.copyOf(имя, длина);
        // Как вы уже знаете, размер контейнера массива после его создания поменять нельзя. А если очень хочется?
        // Создать новый массив нужной длины
        // Скопировать в него все элементы из первого массива.
        //Этот метод не меняет существующий массив, вместо этого он создает новый массив и копирует
        // в него элементы старого массива

// Метод Arrays.copyOfRange()
        // А что делать, если вы хотите получить массив длиной 5 из массива длины 10,
        // но чтобы в нем были не первые 5 элементов, а 5 последних? Именно для этого случая вам пригодится
        // еще один метод класса Arrays – метод Arrays.copyOfRange() Вот как выглядит его вызов:
        //тип[] имя2 = Arrays.copyOfRange(имя, первый, последний);
        //Этот метод тоже создает новый массив, но заполняет его данными из произвольного места исходного массива.
        // Где первый и последний — это номера первой и последней ячеек, которые должны быть в новом массиве.






    }
}
